// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  questions     Question[]
  answers       Answer[]
  votes         Vote[]
  notifications Notification[]

  @@map("users")
}

model Question {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers  Answer[]
  votes    Vote[]
  tags     QuestionTag[]

  @@map("questions")
}

model Answer {
  id          String   @id @default(cuid())
  content     String
  isAccepted  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@map("answers")
}

model Vote {
  id        String   @id @default(cuid())
  voteType  VoteType
  createdAt DateTime @default(now())

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?  @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, answerId])
  @@map("votes")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  questions QuestionTag[]

  @@map("tags")
}

model QuestionTag {
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  @@map("question_tags")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  ANSWER_RECEIVED
  COMMENT_RECEIVED
  MENTION
  VOTE_RECEIVED
} 